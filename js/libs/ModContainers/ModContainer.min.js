!function(n){this.ModContainer=Class.extend({init:function(t){t===n?this.mods=[]:this.mods=t,this.tags=[]},addMod:function(n){return n instanceof Mod&&-1===this.inMods(n.getProp("Rows"))?(this.mods.push(n),!0):!1},removeAllMods:function(){this.mods=[]},removeMod:function(n){var t=this.inMods(n.getProp("Rows"));return-1!==t?(this.mods.splice(t,1),t):!1},getMod:function(n){var t=this.inMods(n);return-1!==t?this.mods[t]:null},inMods:function(n){var t=-1;return $.each(this.mods,function(i,s){return+s.getProp("Rows")===+n?(t=i,!1):void 0}),t},getTags:function(){return $.unique($.map(this.mods,function(n){return n.valueAsArray("TagsKeys")}))},getTagsWithProps:function(n){var t=this.getTags();return $.grep(n,function(n){return-1!==t.indexOf(+n.Rows)})},prefixes:function(){return $.grep(this.mods,function(n){return n.isPrefix()})},suffixes:function(){return $.grep(this.mods,function(n){return n.isSuffix()})},implicits:function(){return $.grep(this.mods,function(n){return n.isImplicit()})},affixes:function(){return this.prefixes().concat(this.suffixes())},asArray:function(){return this.mods},numberOfModsOfType:function(n){return $.grep(this.mods,function(t){return+t.getProp("GenerationType")===n}).length},hasRoomFor:function(n){return this.numberOfModsOfType(+n.getProp("GenerationType"))<this.maxModsOfType(n)},maxModsOfType:function(n){return console.log("override abstract maxModsOfType"),-1}})}();